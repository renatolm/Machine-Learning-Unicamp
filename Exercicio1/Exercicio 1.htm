<!DOCTYPE html PUBLIC "-//IETF//DTD HTML//EN">
<!-- saved from url=(0058)http://www.ic.unicamp.br/~wainer/cursos/2s2016/ml/ex1.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Exercicio 1</title>
</head>

<body>
<h1>Exercício 1</h1>

<p> <b>Data de entrega: 26/9, as 7:00 (da manha).</b>

</p><p> Leia os dados do arquivo <a href="http://www.ic.unicamp.br/~wainer/cursos/2s2016/ml/data1.csv">data1.csv</a> A
classe de cada dado é o valor da última coluna (0 ou 1).

</p><p> 1. faca o PCA dos dados (sem a última coluna). Se voce quiser que os
dados transformados tenham 
80\% da variância original, quantas dimensões do PCA vc precisa manter?

</p><p> Gere os dados transformados mantendo 80\% da variância. (Atenção
este passo não é 100\% correto do ponto de vista de aprendizado
de maquina. Não repita este passo em outras atividades).

</p><p> Considere as primeiras 200 linhas dos dados como o conjunto de
treino, e as 276 ultimas como o conjunto de dados

</p><p> 2. Treine uma regressão logística no conjunto de treino dos dados originais e nos dados
transformados. Qual a taxa de acerto no conjunto de teste nas 2
condições (sem e com PCA)?

</p><p> 3. Treine o LDA nos conjuntos de treino com e sem PCA e teste nos
respectivos conjuntos de testes. Qual a acurácia nas 2 condições?

</p><p> 4. Qual a melhor combinação de classificador e PCA ou não?

</p><p> Existem vários pacotes em R (caret, e mlr), e em Python (sklearn)  que fazem tudo o que eu
pedi acima em uma simples chamada de um "workflow de aprendizado de
maquina" que passa como parâmetros as funções a serem aplicadas e
testadas. Para este e para os próximos exercícios <b>NAO</b> usem esses
"workflows". Eu quero que voces façam explicitamente os passos pedidos.

</p><p> Gere um pdf com o código (R ou Python) e as respostas as
perguntas. Uma nova versão desta pagina informará como submeter o exercicio


</p><h2> Detalhes R</h2>

<p> regressão logística em R é feito pela função <a href="http://www.rdocumentation.org/packages/stats/versions/3.3.1/topics/glm">glm</a>
com parâmetro family="logit". A função predict computa a previsão de
um modelo para novos dados. A função predict quando o primeiro
argumento é um modelo da classes <tt>gkm</tt> é chamada
de <tt>predict.glm</tt>



</p><p> LDA é feito pela função <a href="http://www.rdocumentation.org/packages/MASS/versions/7.3-45/topics/lda">lda</a>
do pacote <tt>MASS</tt>. <a href="http://www.rdocumentation.org/packages/MASS/versions/7.3-45/topics/predict.lda">predict.lda</a>
para obter o resultado do modelo em dados novos.

</p><p> Note que povavelmente a forma de chamada do glm e do lda não
é a mesma, e acho que uma delas espera o atributo de saida
numérico (0 e 1),
e a outra espera um atributo categorico (chamado de <tt>factor</tt> em
R. 

</p><h2>Detalhes em Python</h2>

<p><a href="http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html">PCA</a>,
<a href="http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html">regressao
logistica</a> e <a href="http://scikit-learn.org/0.16/modules/generated/sklearn.lda.LDA.html">LDA</a>
todos do sklearn. 


</p><hr>
<address></address>
<!-- hhmts start -->Last modified: Sun Sep 11 18:08:02 BRT 2016 <!-- hhmts end -->
 
</body></html>