Bagging lots of users is a challenge one of the startups in Y Combinator’s 2016 winter batch is worrying about a bit less than the average. The two-man strong founder team of Thunkable is coming from the rather more comfortable position of already having fostered a community over four million strong — thanks to the drag-and-drop app builder interface they helped developed at MIT some five years ago. The same core tech the pair are now aiming to build a business on.
And while they don’t yet have all those millions of users locked into their new tool, they do have some 50,000 people signed up about month after launching their free app builder. And a clear path to encourage over more of their old users — and bring on new ones too.
So why the fork of the original MIT project now? The success of MIT’s App Inventor meant it had outgrown the resources afforded it within academia, say Thunkable’s co-founders Arun Saigal (CEO) and WeiHua Li (CTO).
Hence the decision to seek to commercialize the core technology under a new name, building atop the MIT open source code with new features they hope will also support their intention to monetize down the line. (To be clear, Thunkable’s code will not be open source, although they say they do hope to take in community contributions in future.)
While MIT App Inventor’s original target was educators and students, offering a free learning tool to lower the barrier of entry to coding, the pair say the success of the software — which has been used to make some 13 million apps at this point, and garnered 4.3 million registered users — called for spinning out of the academic setting.
“The original goals of App Inventor were basically make a tool to teach people to code. So our lab that we worked in at MIT invented a lot of drag and drop programming tools — we worked with Scratch, Lego Mindstorms, tools like that,” says Saigal. “From there it started growing, quite a bit. Mainly in education first and then a lot outside of education.”
When App Inventor’s growth hit around 300,000 monthly active users the team decided to take stock by surveying the users to ask who they were and what they were using it for. The result was a surprise: they found the majority (over 50 per cent) were not in fact educators — a realization that let them to consider the potential of transforming an educational resource into a business.
In fact, says Saigal, they discovered all sorts of people were using the software to build all sorts of apps — from individuals wanting to make an app to control a connected LED light in their own home all the way up to enterprises using it to put together apps for their sales teams.
The team at MIT was also fielding more and more feature requests from App Inventor users. But did not have the resource to serve all the requests. So both demand and potential for growth were clear.
“We saw that there was this huge range and actually a majority of our users were not education. And our users started sending us ‘hey can you build this?’, ‘can you build that?’ — obvious things, monetization or the ability to add in Google Maps or something like that. And these weren’t features that we we ever within the scope of App Inventor,” says Saigal.
“It was at that point that we realized A) we weren’t supporting the users as well as we could and B) we this had evolved way past what we initially imagined… It had evolved into the largest app creation tool for non-programmers that was out there. ”
Other app builder tools do already exist of course, including the likes of Bizness Apps and AppGyver. There’s also the outsourcing route for companies to hire external devs or dev studios to build apps for them. The latter option can be expensive, though. While existing app builders aren’t always that accessible to non-developers, the pair argue; some level of coding knowledge may still be required.
The claim for Thunkable is that anyone who can use a computer can build an app, says Li — simply by slotting together the blocks of code it uses to simplify the programming process.
“We’re a tool for anybody and everyone who wants to build apps — from the non-developer to the highly skilled developer who wants to do do something quicker and easier,” adds Saigal.
“There are two parts to our tool,” he explains. “The first part is the designer and what that is is basically you can drag and drop the UI of your app. So if you say hey here’s my screen I want a button, I want a text field, I want these sensors and I want an image, ok great.
“Then the second part is the blocks language. This is a programming language that our group invented — it is a programming language in the sense that if you click a button you have drag the ‘when button.click’ block. So there is a programming language there but at the end of the day it’s meant to be for people who don’t necessary know how to code but have a sense of logic.”
“It is the same concept [as coding] but it’s much more English-friendly, it’s much more logical and straightforward than writing in Java or whatever other language it may be,” he adds.
“In the old fashioned [programming languages] you need to type in. In our block language you just already building it — you can just see it, you can just use it. That’s the beauty of using block programming language,” adds Li. “Also it’s grammar error free. Basically you just piece the blocks together. You don’t have to worry about typos.”
“If the blocks fit together, it compiles, it builds, it works. If they don’t fit together it doesn’t work,” adds Saigal. “You can drag and drop the blocks, or you can type in words and if you start typing in words the blocks exist. If you’re not sure what to do and you type ‘button click’ the when button.click block will pop up. And so you can think through thoughts and the blocks almost fill themselves in.”

Another advantage over competing app builders that Saigal claims is that apps built with Thunkable’s software are fully native, rather than being web apps. So can work offline and are able to make use of specific mobile hardware features such as GPS and NFC. And while Thunkable does offer some templates for people who want a little more structure to get started it is not limited to just building template apps — unlike some competitors.
There is also no need to download an SDK to build apps on Thunkable. The software works in the browser, and includes other features designed to appeal to a broad user-base — such as the ability to live test the app being built on the user’s Android phone.

“We have a live development feature where you can connect your phone to your browser and as you’re developing actually see your app running live on your phone,” says Saigal. “That’s one of the things people love because as a new developer you’re looking for immediate gratification.”
Given Thunkable’s jumping off point is a strong community built off of free software, the pair say the plan is to keep offering a free version (Thunkable is currently entirely free) for the foreseeable future. Monetization will come via a freemium route, building a tiered pricing model on top of the basic free version. They say they will likely be charging users for certain extra features, with different pricing tiers based on whether the user is an individual, a SME or a large enterprise.
At this early stage Thunkable is not just App Inventor with a new name; they have already added some new features to the platform. Additions include extra sample apps and templates, support for Google Maps and enabling Android’s Material Design features (which they say again the MIT team never had the resources to support).
“You come to the site there are obvious UI improvements [with Thunkable vs App Inventor]. The buttons, the color scheme, all that kind of stuff we’ve improved. And then past that probably a couple of the largest features that we’ve added are that at MIT we did not support any of the new Android design stuff so,” says Saigal.
“Thunkable supports Material Design and the new UIs, the ripple effects, things like that. That was a big upgrade for our users. It’s very simple to transfer your projects over and they would say ‘wow my app looks way nicer with no extra effort’.”
The team is also offering stepped up support — so is responding (currently for free) to “every email… every chat that we get online”. “That’s been one of the biggest things that we offer — actual human support to work through your problems with you,” he adds.
The types of features Thunkable might start charging a monthly subscription fee for in future could be for monetization capabilities for apps built with the platform, perhaps charging individuals $5 to $10 per month for that. Right up to much more premium, enterprise options — with much higher monthly subscription fees attached — such as the ability for an enterprise customer to have a white label version of an app that lets them host their own data and includes support for specific enterprise software.
In terms of the timeframe to flicking the monetization switch on, they say it’s going to be “sometime in the next year”. Although the priority right now is building out the product and growing users, they add.
Keeping the App Inventor community on side is going to be essential to scaling the business, given that a four-million strong user-base was able to be sustained by just two dedicated MIT staff. How was MIT able to support so many users with so few staff? Community power users chipped in a lot of help with support on the forums, says Li.
And since having strong customer support is a key plank of Thunkable’s proposition then scaling as a business without needing to hire very large numbers of support staff will be more easily achieved if they can likewise nurture a strong and engage community to pull with them.
What will happen to MIT’s App Inventor? It’s not entirely clear at this point, but it looks like development on that project may well wind down in future, with Thunkable picking up the baton.
The startup has been funded by a $120,000 seed from YC so far, which the co-founders reckon will see them through the rest of the year — saying they are in no hurry to raise another round at this stage.
As well as using the funding to hire more staff to help scale the business, they are working on building an iOS version of the product — which currently only supports building Android apps. An iOS version has become possible since Apple open sourced its programming language, Swift, last December, according to Saigal. It also wasn’t possible before given MIT’s limited resources.
“People have been asking for the iOS version for years and we’re finally investing the time and resources in,” he says, adding that the hope is to have an early version of this ready towards the end of the year — and a full version launched this time next year.
Beyond adding iOS, the longer term goal for Thunkable is to evolve the tool so it supports collaborative app development — much like Google Docs allows multiple people to easily work on documents together, according to Li.
“We want to be for people to build projects or coding as easy as writing on Google Docs. That’s our long term strategy. How to make a tool to enable or empower our user, empower people to build tools collaboratively,” he says.
“I think that would be a really powerful incentive [for young people] to learn coding or just by sparking ideas — turning their ideas into mobile apps. Or even something beyond that that we don’t know yet.”

